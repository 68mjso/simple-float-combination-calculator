import numpy
import math
from config import config_min, config_max, config_target, config_using
from func import combination_util, combination_util_sorted
from time import process_time

numpy.set_printoptions(precision=16)
# 0.92568576335907,0.97506535053253,0.98727095127106,0.90118920803070,0.92810839414597,0.91585707664490,0.91873681545258,0.92406415939331,0.93037474155426,0.93180787563324,0.95168042182922,0.96873486042023
# 0.45024099946022,0.45338138937950,0.45359215140343,0.45898839831352,0.46075183153152,0.46215561032295,0.46229997277260,0.46505486965179,0.46517336368561,0.46744197607040,0.48108267784119,0.49574655294418,0.49610894918442,0.50232058763504,0.50643754005432,0.50787061452866,0.50797891616821,0.50901329517365,0.51362276077271,0.51400619745255,0.51417702436447,0.51614958047867,0.51819336414337,0.52518403530121,0.53300625085831,0.53321367502213,0.53591817617416,0.53713899850845,0.53825104236603,0.53943920135498,0.53992104530334,0.54580241441727,0.54905533790588,0.54986733198166,0.56354767084122,0.56379985809326,0.56790304183960,0.57357054948807,0.57411116361618,0.57637023925781,0.57915955781937,0.57932615280151,0.58073145151138,0.58808219432831,0.58815801143646,0.59057933092117,0.59471052885056,0.61275053024292,0.61619091033936,0.61823171377182,0.62872380018234,0.62917214632034,0.62980502843857,0.63333183526993,0.63849359750748,0.64123845100403,0.64228278398514,0.64720493555069,0.64846140146255,0.65581738948822,0.65611696243286,0.65659570693970,0.65874630212784,0.65940016508102,0.66039150953293,0.66301208734512,0.66301971673965,0.66594451665878,0.66604882478714,0.66804617643356,0.66969174146652,0.67308992147446,0.68321818113327,0.69690418243408,0.70337539911270,0.70561867952347,0.71292662620544,0.71577763557434,0.71587628126144,0.71730667352676,0.71789157390594,0.71863681077957,0.72143560647964,0.72259944677353,0.74120974540710,0.74340319633484,0.74511486291885,0.74538201093674,0.74806976318359,0.74876928329468,0.75336742401123,0.76760387420654,0.76834255456924,0.76940774917603,0.77803176641464,0.77954185009003,0.78502732515335,0.78514647483826,0.78639817237854,0.79570639133453,0.45024099946022,0.45338138937950,0.45359215140343,0.45898839831352,0.46075183153152,0.46215561032295,0.46229997277260,0.46505486965179,0.46517336368561,0.46744197607040,0.48108267784119,0.49574655294418,0.49610894918442,0.50232058763504,0.50643754005432,0.50787061452866,0.50797891616821,0.50901329517365,0.51362276077271,0.51400619745255,0.51417702436447,0.51614958047867,0.51819336414337,0.52518403530121,0.53300625085831,0.53321367502213,0.53591817617416,0.53713899850845,0.53825104236603,0.53943920135498,0.53992104530334,0.54580241441727,0.54905533790588,0.54986733198166,0.56354767084122,0.56379985809326,0.56790304183960,0.57357054948807,0.57411116361618,0.57637023925781,0.57915955781937,0.57932615280151,0.58073145151138,0.58808219432831,0.58815801143646,0.59057933092117,0.59471052885056,0.61275053024292,0.61619091033936,0.61823171377182,0.62872380018234,0.62917214632034,0.62980502843857,0.63333183526993,0.63849359750748,0.64123845100403,0.64228278398514,0.64720493555069,0.64846140146255,0.65581738948822,0.65611696243286,0.65659570693970,0.65874630212784,0.65940016508102,0.66039150953293,0.66301208734512,0.66301971673965,0.66594451665878,0.66604882478714,0.66804617643356,0.66969174146652,0.67308992147446,0.68321818113327,0.69690418243408,0.70337539911270,0.70561867952347,0.71292662620544,0.71577763557434,0.71587628126144,0.71730667352676,0.71789157390594,0.71863681077957,0.72143560647964,0.72259944677353,0.74120974540710,0.74340319633484,0.74511486291885,0.74538201093674,0.74806976318359,0.74876928329468,0.75336742401123,0.76760387420654,0.76834255456924,0.76940774917603,0.77803176641464,0.77954185009003,0.78502732515335,0.78514647483826,0.78639817237854,0.79570639133453
def combination_calculator(core_arr: list, input_arr: list):
    found = False
    using_arr = []
    input_arr_1 = input_arr

    diff = numpy.subtract(config_max, config_min)
    target_avg = numpy.float64((config_target - config_min) / diff)
    r = 10 - config_using

    try:
        f = open("output.txt", "w")
        f.write("")
        f.close()
    except:
        f = open("output.txt", "x")
        f.close()
    itr = math.floor(len(core_arr) / config_using)
    time_start = process_time()
    for i in range(itr):
        itr_core = core_arr[(config_using * i) : (config_using * (i + 1))]
        sum_core_arr = sum(itr_core) / 10
        diff_target = target_avg - sum_core_arr
        diff_avg = diff_target / (10 - len(core_arr)) * 10
        # Sort the input array
        arr = sorted(input_arr_1, key=lambda x: abs(diff_avg - x), reverse=False)
        n = len(arr)
        data = [0] * r
        # result = combination_util(
        #     core_arr=itr_core,
        #     arr=arr,
        #     data=data,
        #     start=0,
        #     end=n - 1,
        #     index=0,
        #     r=r,
        #     diff=diff,
        #     diff_target=diff_target,
        #     target_avg=target_avg,
        #     found=found,
        #     using_arr=using_arr
        # )
        result = combination_util_sorted(
            core_arr=itr_core,
            arr=arr,
            data=data,
            start=0,
            end=n - 1,
            index=0,
            r=r,
            diff=diff,
            diff_target=diff_target,
            target_avg=target_avg,
            found=found,
            using_arr=using_arr,
            remain=diff_target,
        )
        if result["result"] == True:
            using_arr = result["arr"]
            for item in using_arr:
                input_arr_1.remove(item)
            found = False
            using_arr = []

    time_stop = process_time()

    return {"time": time_stop - time_start}
